#!/usr/bin/env python2

from operator import itemgetter
import math
import pygame

#collisions = [(-993, 0, 0, 121), (-993, 121, -882, 0), (-1875, 121, 0, 500), (-1875, 621, -740, 0), (-2615, 621, 0, -222), (-2615, 399, 574, 0), (-2041, 399, 0, 947), (-2041, 1346, -541, 0), (-2582, 1346, 0, 949), (-2582, 2295, -219, 0), (-2801, 2295, 0, -492), (-2801, 1803, 108, 0), (-2693, 1803, 0, -621), (-2693, 1182, -875, 0), (-3568, 1182, 0, -715), (-3568, 467, 274, 0), (-3294, 467, 0, -858), (-3294, -391, 510, 0), (-2784, -391, 0, 668), (-2784, 277, 677, 0), (-2107, 277, 0, 327), (-2107, 604, -284, 0), (-2391, 604, 0, 537), (-2391, 1141, -371, 0), (-2762, 1141, 0, 810), (-2762, 1951, -360, 0), (-3122, 1951, 0, 333), (-3122, 2284, -926, 0), (-4048, 2284, 0, -144), (-4048, 2140, 162, 0), (-3886, 2140, 0, 750), (-3886, 2890, -741, 0), (-4627, 2890, 0, -360), (-4627, 2530, 792, 0), (-3835, 2530, 0, -256), (-3835, 2274, -44, 0), (-3879, 2274, 0, -893), (-3879, 1381, 969, 0), (-2910, 1381, 0, -996), (-2910, 385, -905, 0), (-3815, 385, 0, -524), (-3815, -139, 538, 0), (-3277, -139, 0, 141), (-3277, 2, 70, 0), (-3207, 2, 0, 347), (-3207, 349, -383, 0), (-3590, 349, 0, 74), (-3590, 423, 893, 0), (-2697, 423, 0, -560), (-2697, -137, -39, 0), (-2736, -137, 0, 447), (-2736, 310, -205, 0), (-2941, 310, 0, -783), (-2941, -473, -244, 0), (-3185, -473, 0, -40), (-3185, -513, 374, 0), (-2811, -513, 0, 507), (-2811, -6, -946, 0), (-3757, -6, 0, -934), (-3757, -940, 962, 0), (-2795, -940, 0, -138), (-2795, -1078, -584, 0), (-3379, -1078, 0, 562), (-3379, -516, -624, 0), (-4003, -516, 0, 69), (-4003, -447, -77, 0), (-4080, -447, 0, -137), (-4080, -584, -441, 0), (-4521, -584, 0, 671), (-4521, 87, -849, 0), (-5370, 87, 0, -283), (-5370, -196, -742, 0), (-6112, -196, 0, -459), (-6112, -655, 105, 0), (-6007, -655, 0, -265), (-6007, -920, 312, 0), (-5695, -920, 0, -734), (-5695, -1654, 47, 0), (-5648, -1654, 0, -369), (-5648, -2023, 676, 0), (-4972, -2023, 0, -429), (-4972, -2452, 160, 0), (-4812, -2452, 0, -814), (-4812, -3266, -881, 0), (-5693, -3266, 0, -830), (-5693, -4096, 395, 0), (-5298, -4096, 0, 598), (-5298, -3498, -413, 0), (-5711, -3498, 0, 817), (-5711, -2681, 855, 0), (-4856, -2681, 0, -377), (-4856, -3058, -338, 0), (-5194, -3058, 0, -413), (-5194, -3471, -294, 0), (-5488, -3471, 0, 321), (-5488, -3150, -714, 0), (-6202, -3150, 0, -217), (-6202, -3367, -15, 0), (-6217, -3367, 0, 341), (-6217, -3026, 342, 0), (-5875, -3026, 0, -480), (-5875, -3506, 660, 0), (-5215, -3506, 0, -11), (-5215, -3517, -192, 0), (-5407, -3517, 0, 518), (-5407, -2999, -654, 0), (-6061, -2999, 0, 13), (-6061, -2986, -984, 0), (-7045, -2986, 0, -866), (-7045, -3852, 877, 0), (-6168, -3852, 0, 801), (-6168, -3051, 413, 0), (-5755, -3051, 0, 66), (-5755, -2985, 269, 0), (-5486, -2985, 0, -750), (-5486, -3735, 294, 0), (-5192, -3735, 0, -143), (-5192, -3878, 929, 0), (-4263, -3878, 0, -786), (-4263, -4664, 606, 0), (-3657, -4664, 0, 816), (-3657, -3848, -562, 0), (-4219, -3848, 0, 938), (-4219, -2910, 484, 0), (-3735, -2910, 0, 32), (-3735, -2878, 136, 0), (-3599, -2878, 0, 30), (-3599, -2848, -393, 0), (-3992, -2848, 0, 209), (-3992, -2639, -838, 0), (-4830, -2639, 0, 451), (-4830, -2188, -387, 0), (-5217, -2188, 0, 413), (-5217, -1775, 518, 0), (-4699, -1775, 0, -9), (-4699, -1784, -847, 0), (-5546, -1784, 0, -605), (-5546, -2389, -8, 0), (-5554, -2389, 0, -805), (-5554, -3194, 348, 0), (-5206, -3194, 0, -174), (-5206, -3368, 865, 0), (-4341, -3368, 0, 962), (-4341, -2406, 926, 0), (-3415, -2406, 0, 401), (-3415, -2005, 445, 0), (-2970, -2005, 0, 720), (-2970, -1285, -843, 0), (-3813, -1285, 0, 785), (-3813, -500, 287, 0), (-3526, -500, 0, -656), (-3526, -1156, -489, 0), (-4015, -1156, 0, -465), (-4015, -1621, -192, 0), (-4207, -1621, 0, 68), (-4207, -1553, -738, 0), (-4945, -1553, 0, 962), (-4945, -591, 384, 0), (-4561, -591, 0, 288), (-4561, -303, -517, 0), (-5078, -303, 0, 396), (-5078, 93, -955, 0), (-6033, 93, 0, 556), (-6033, 649, 707, 0), (-5326, 649, 0, 329), (-5326, 978, -589, 0), (-5915, 978, 0, 604), (-5915, 1582, -583, 0), (-6498, 1582, 0, 457), (-6498, 2039, 545, 0), (-5953, 2039, 0, -504), (-5953, 1535, -521, 0), (-6474, 1535, 0, 711), (-6474, 2246, -232, 0), (-6706, 2246, 0, -329), (-6706, 1917, -110, 0), (-6816, 1917, 0, 167), (-6816, 2084, 311, 0), (-6505, 2084, 0, -234), (-6505, 1850, 284, 0), (-6221, 1850, 0, -984), (-6221, 866, -778, 0), (-6999, 866, 0, -295), (-6999, 571, 603, 0), (-6396, 571, 0, 349), (-6396, 920, 942, 0), (-5454, 920, 0, 81), (-5454, 1001, 972, 0), (-4482, 1001, 0, -505), (-4482, 496, -301, 0), (-4783, 496, 0, 422), (-4783, 918, 840, 0), (-3943, 918, 0, 689), (-3943, 1607, 225, 0), (-3718, 1607, 0, -780), (-3718, 827, 379, 0), (-3339, 827, 0, -200), (-3339, 627, 57, 0), (-3282, 627, 0, -781), (-3282, -154, 166, 0), (-3116, -154, 0, 245), (-3116, 91, -865, 0), (-3981, 91, 0, 790), (-3981, 881, 654, 0), (-3327, 881, 0, -127), (-3327, 754, 125, 0), (-3202, 754, 0, -363), (-3202, 391, -989, 0), (-4191, 391, 0, -976), (-4191, -585, 993, 0), (-3198, -585, 0, 702), (-3198, 117, -461, 0), (-3659, 117, 0, 165), (-3659, 282, -747, 0), (-4406, 282, 0, 656), (-4406, 938, 617, 0), (-3789, 938, 0, -115), (-3789, 823, -783, 0), (-4572, 823, 0, 187), (-4572, 1010, -462, 0), (-5034, 1010, 0, 838), (-5034, 1848, 854, 0), (-4180, 1848, 0, -516), (-4180, 1332, -978, 0), (-5158, 1332, 0, 846), (-5158, 2178, 203, 0), (-4955, 2178, 0, -46), (-4955, 2132, 833, 0), (-4122, 2132, 0, 393), (-4122, 2525, -322, 0), (-4444, 2525, 0, -17), (-4444, 2508, -160, 0), (-4604, 2508, 0, -278), (-4604, 2230, 919, 0), (-3685, 2230, 0, 611), (-3685, 2841, -59, 0), (-3744, 2841, 0, 709), (-3744, 3550, -472, 0), (-4216, 3550, 0, 871), (-4216, 4421, -377, 0), (-4593, 4421, 0, 111), (-4593, 4532, -612, 0), (-5205, 4532, 0, -177), (-5205, 4355, 712, 0), (-4493, 4355, 0, 628), (-4493, 4983, 858, 0), (-3635, 4983, 0, -54), (-3635, 4929, -612, 0), (-4247, 4929, 0, -303), (-4247, 4626, 205, 0), (-4042, 4626, 0, 430), (-4042, 5056, 494, 0), (-3548, 5056, 0, -306), (-3548, 4750, -474, 0), (-4022, 4750, 0, 848), (-4022, 5598, 816, 0), (-3206, 5598, 0, -104), (-3206, 5494, -967, 0), (-4173, 5494, 0, 886), (-4173, 6380, -866, 0), (-5039, 6380, 0, -366), (-5039, 6014, -120, 0), (-5159, 6014, 0, -735), (-5159, 5279, 694, 0), (-4465, 5279, 0, -335), (-4465, 4944, 399, 0), (-4066, 4944, 0, -198), (-4066, 4746, 132, 0), (-3934, 4746, 0, -787), (-3934, 3959, -749, 0), (-4683, 3959, 0, -612), (-4683, 3347, 525, 0), (-4158, 3347, 0, 163), (-4158, 3510, 660, 0), (-3498, 3510, 0, 316), (-3498, 3826, 482, 0), (-3016, 3826, 0, -412), (-3016, 3414, -376, 0), (-3392, 3414, 0, 170), (-3392, 3584, 891, 0), (-2501, 3584, 0, -202), (-2501, 3382, 408, 0), (-2093, 3382, 0, -333), (-2093, 3049, 842, 0), (-1251, 3049, 0, 965), (-1251, 4014, 955, 0), (-296, 4014, 0, 440), (-296, 4454, -26, 0), (-322, 4454, 0, 747), (-322, 5201, 447, 0), (125, 5201, 0, -8), (125, 5193, 319, 0), (444, 5193, 0, -188), (444, 5005, -532, 0), (-88, 5005, 0, -39), (-88, 4966, -863, 0), (-951, 4966, 0, -599), (-951, 4367, 307, 0), (-644, 4367, 0, 253), (-644, 4620, 22, 0)]
#wire_1 = ['R1007,D949,R640,D225,R390,D41,R257,D180,L372,U62,L454,U594,L427,U561,R844,D435,L730,U964,L164,U342,R293,D490,L246,U323,L14,D366,L549,U312,L851,U959,L255,U947,L179,U109,R850,D703,L310,U175,L665,U515,R23,D633,L212,U650,R477,U131,L838,D445,R999,D229,L772,U716,L137,U355,R51,D565,L410,D493,L312,U623,L846,D283,R980,U804,L791,U918,L641,U258,R301,U727,L307,U970,L748,U229,L225,U997,L134,D707,L655,D168,L931,D6,R36,D617,L211,D453,L969,U577,R299,D804,R910,D898,R553,U298,L309,D912,R757,U581,R228,U586,L331,D865,R606,D163,R425,U670,R156,U814,L168,D777,R674,D970,L64,U840,L688,U144,L101,U281,L615,D393,R277,U990,L9,U619,L904,D967,L166,U839,L132,U216,R988,U834,R342,U197,L717,U167,L524,U747,L222,U736,L149,D156,L265,U657,L72,D728,L966,U896,R45,D985,R297,U38,R6,D390,L65,D367,R806,U999,L840,D583,R646,U43,L731,D929,L941,D165,R663,U645,L753,U619,R60,D14,L811,D622,L835,U127,L475,D494,R466,U695,R809,U446,R523,D403,R843,U715,L486,D661,L584,U818,L377,D857,L220,U309,R192,U601,R253,D13,L95,U32,L646,D983,R13,U821,L1,U309,L425,U993,L785,U804,L663,U699,L286,U280,R237,U388,L170,D222,L900,U204,R68,D453,R721,U326,L629,D44,R925,D347,R264,D767,L785,U249,R989,D469,L446,D384,L914,U444,R741,U90,R424,U107,R98,U20,R302,U464,L808,D615,R837,U405,L191,D26,R661,D758,L866,D640,L675,U135,R288,D357,R316,D127,R599,U411,R664,D584,L979,D432,R887,D104,R275,D825,L338,D739,R568,D625,L829,D393,L997,D291,L448,D947,L728,U181,L137,D572,L16,U358,R331,D966,R887,D122,L334,D560,R938,D159,R178,D29,L832,D58,R374']

#wire_2 = ['L993,U121,L882,U500,L740,D222,R574,U947,L541,U949,L219,D492,R108,D621,L875,D715,R274,D858,R510,U668,R677,U327,L284,U537,L371,U810,L360,U333,L926,D144,R162,U750,L741,D360,R792,D256,L44,D893,R969,D996,L905,D524,R538,U141,R70,U347,L383,U74,R893,D560,L39,U447,L205,D783,L244,D40,R374,U507,L946,D934,R962,D138,L584,U562,L624,U69,L77,D137,L441,U671,L849,D283,L742,D459,R105,D265,R312,D734,R47,D369,R676,D429,R160,D814,L881,D830,R395,U598,L413,U817,R855,D377,L338,D413,L294,U321,L714,D217,L15,U341,R342,D480,R660,D11,L192,U518,L654,U13,L984,D866,R877,U801,R413,U66,R269,D750,R294,D143,R929,D786,R606,U816,L562,U938,R484,U32,R136,U30,L393,U209,L838,U451,L387,U413,R518,D9,L847,D605,L8,D805,R348,D174,R865,U962,R926,U401,R445,U720,L843,U785,R287,D656,L489,D465,L192,U68,L738,U962,R384,U288,L517,U396,L955,U556,R707,U329,L589,U604,L583,U457,R545,D504,L521,U711,L232,D329,L110,U167,R311,D234,R284,D984,L778,D295,R603,U349,R942,U81,R972,D505,L301,U422,R840,U689,R225,D780,R379,D200,R57,D781,R166,U245,L865,U790,R654,D127,R125,D363,L989,D976,R993,U702,L461,U165,L747,U656,R617,D115,L783,U187,L462,U838,R854,D516,L978,U846,R203,D46,R833,U393,L322,D17,L160,D278,R919,U611,L59,U709,L472,U871,L377,U111,L612,D177,R712,U628,R858,D54,L612,D303,R205,U430,R494,D306,L474,U848,R816,D104,L967,U886,L866,D366,L120,D735,R694,D335,R399,D198,R132,D787,L749,D612,R525,U163,R660,U316,R482,D412,L376,U170,R891,D202,R408,D333,R842,U965,R955,U440,L26,U747,R447,D8,R319,D188,L532,D39,L863,D599,R307,U253,R22']

wire_1 = ['R75,D30,R83,U83,L12,D49,R71,U7,L72']
wire_2 = ['U62,R66,U55,R34,D71,R55,D58,R83']
def manhattan_distance(b):
    somma = 0
    for elem in b:
        somma += math.fabs(elem)
    return somma

def euclidean_distance(b):
    euclidean = 0
    euclidean += (b[0]-b[1])**2 + (b[2]-b[3])**2
    return math.sqrt(euclidean)
collisions = [(0, 0, 0, 62), (0, 62, 66, 0), (66, 62, 0, 55), (66, 117, 34, 0), (100, 117, 0, -71), (100, 46, 55, 0), (155, 46, 0, -58), (155, -12, 83, 0)]

somme = []
for i in range(0, len(collisions)):

    somme.append((collisions[i],euclidean_distance(collisions[i])))
    
somme = sorted(somme,key=itemgetter(1))
print(somme)
wire_1 = wire_1[0].split(',')
wire_2 = wire_2[0].split(',')
w_1 = len(wire_1)
w_2 = len(wire_2)

arr1 = []
arr2 = []

for i in range(0, w_1):
    val = map(str, wire_1[i][0])
    letter = ', '.join(val)
    num = int(wire_1[i][1:])
    arr1.append((letter, num))

for i in range(0, w_2):
    val = map(str, wire_2[i][0])
    letter = ', '.join(val)
    num = int(wire_2[i][1:])
    arr2.append((letter, num))

direction = {
        'R': [1, 0],
        'L': [-1, 0],
        'U': [0, 1],
        'D': [0, -1]
        }
origin = [0, 0]
primo = []
secondo = []
for letter, number in arr1:
    mapping = direction[letter]
    coordinate = [number*i for i in mapping]
    primo.append(coordinate)

for letter, number in arr2:
    mapping = direction[letter]
    coordinate = [number*i for i in mapping]
    secondo.append(coordinate)
print(wire_1)
print(primo)
print(wire_2)
print(secondo)
pygame.init()
size = (1600,900)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("My First Game")

red = (255,0,0)
green = (0,255,0)
blue = (0,0,255)
darkBlue = (0,0,128)
white = (255,255,255)
black = (0,0,0)
pink = (255,200,200)

# The loop will carry on until the user exit the game (e.g. clicks the close button).
carryOn = True

# The clock will be used to control how fast the screen updates
clock = pygame.time.Clock()

# -------- Main Program Loop -----------
while carryOn:
    # --- Main event loop
    for event in pygame.event.get(): # User did something
        if event.type == pygame.QUIT: # If user clicked close
              carryOn = False # Flag that we are done so we exit this loop

	# --- Game logic should go here

    # --- Drawing code should go here
    # First, clear the screen to white. 
    screen.fill(white)
    #The you can draw different shapes and lines or add text to your background stage.
    x = 0
    y = 0
    height = 0
    width = 0
    rects= []
    for i in range(0, len(primo)):
        width = primo[i][0]
        height = primo[i][1]
        pygame.draw.rect(screen, red, (x,y,width,height), 2)
	rects.append((x,y,width,height))
        x += width
        y += height

    x_s = 0
    y_s = 0
    height_s = 0
    width_s = 0
    collisions = []
    for i in range(0, len(secondo)):
        width_s = secondo[i][0]
        height_s = secondo[i][1]
        rect = pygame.draw.rect(screen, blue, (x_s,y_s,width_s,height_s), 2)
        if rect.collidelist(rects):
            collisions.append((x_s,y_s,width_s,height_s))
        x_s += width_s
        y_s += height_s
    # --- Go ahead and update the screen with what we've drawn.
    pygame.display.flip()

    # --- Limit to 60 frames per second
    clock.tick(60)
print(collisions)
#Once we have exited the main program loop we can stop the game engine:
pygame.quit()

